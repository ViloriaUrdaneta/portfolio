[
    {
        "id": 1,
        "title": "JavaScript y el multitasking",
        "body": "¿Eres, igual que yo, un desarrollador junior recién salido de algún bootcamp? que hace un par de años pensaba que Java era como los amigos le decían a JavaScript y que ahora está orgulloso de llamarse fullstack con su mochila de NodeJS, React, APIs, esperanzas de sueldos de muchos dígitos y sueños rotos por reclutadores que no devuelven las llamadas. \n Pero no todo es felicidad en el horizonte porque ves como los otros lenguajes de programación old school como C++ y Java, ven con cierto desprecio tus humildes servidores hechos con Express y ni siquiera sabes muy bien porqué. \n Para empezar comencemos por describir JavaScript. \n JavaScript es un lenguaje de alto nivel, de un solo proceso (single threaded), débilmente tipado, interpretado y dinámico entre otro calificativos. \n ¿Cual es una de estas características por las que se lo mira en menos respecto a otros lenguajes? \n Que sea de un solo proceso o single threaded suena de por sí limitante. ¿Por qué de un solo y no de dos, de tres o cuatro? ¿Qué significa esto? \n Esto significa que solo se ejecuta una declaración a la vez, por lo que los procesos se estructuran en pilas, o Stack que se van leyendo uno a uno. ¿Y qué pasa cuando uno de estos procesos toma demasiado tiempo? Ahí es cuando entran las famosas funciones call back que básicamente lo que hacen es decir, como su nombre lo indica, call me back cuando la función se haya ejecutado. \n Esto es como la cocina de un restaurante que tiene varias órdenes en curso y un solo cocinero pendiente de los panes en la tostadora, la pulpa en la juguera y la taza en la cafetera, todo al mismo tiempo. \n Esto nos hace entender un poco más la superioridad moral de otros lenguajes que son multi hilos frente a nuestro querido JS. Pero y si decimos que Node JS tiene un módulo para hacerlo multi-threads \n Hablamos de Worker threads. Con el que puedes asignar distintos hilos de ejecución a distintos núcleos de tu procesador, disminuyendo así los tiempos de ejecución. \n Tal vez en otro texto me extienda más sobre el funcionamiento de esta librería pero esto ya está quedando muy largo y si llegaste hasta acá te doy las gracias porque supongo que tienes mejores cosas que hacer antes que estar procrastinando leyendo este texto. Porque muchos de nosotros somos, igual que JavaScript, de un solo proceso (single threaded).",
        "subject": "JavaScript",
        "date": "07/08/2023"
    }
]